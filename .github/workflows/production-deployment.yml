name: Production Deployment Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Testing Suite
  test-suite:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [shared, cli, web, mock-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build:shared

      - name: Run unit tests
        run: npm test --workspace=packages/${{ matrix.package }}

      - name: Run type checking
        run: npm run type-check --workspace=packages/${{ matrix.package }}

      - name: Run linting
        run: npm run lint --workspace=packages/${{ matrix.package }}

      - name: Generate test coverage
        run: npm run test:coverage --workspace=packages/${{ matrix.package }} --if-present

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./packages/${{ matrix.package }}/coverage/lcov.info
          flags: ${{ matrix.package }}

  # End-to-End Testing
  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [test-suite]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: memory_manager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Start test environment
        run: |
          npm run dev:mock-server &
          npm run dev:web &
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e --if-present
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/memory_manager_test

      - name: Store E2E artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            test-results/
            screenshots/
            videos/

  # Performance Testing
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test-suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance benchmarks
        run: npm run test:performance --if-present

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Build and Package
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite, e2e-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Web image
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.web
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push CLI image
        id: build-cli
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.cli
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cli:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Mock Server image
        id: build-mock
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.mock-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mock-server:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: /tmp/sbom.spdx.json

      - name: Scan image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
          fail-build: true
          severity-cutoff: high

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package, performance-tests]
    environment:
      name: staging
      url: https://staging.memory-manager.example.com
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ needs.build-and-package.outputs.version }}|g" k8s/staging/*.yaml
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/memory-manager-web -n staging
          kubectl rollout status deployment/memory-manager-mock-server -n staging

      - name: Run staging smoke tests
        run: |
          sleep 60  # Wait for deployment to stabilize
          npm run test:staging --if-present

      - name: Update staging status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: 'https://staging.memory-manager.example.com',
              description: 'Staging deployment successful',
              context: 'continuous-integration/staging'
            });

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment:
      name: production
      url: https://memory-manager.example.com
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Pre-deployment health check
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n production
          kubectl get services -n production

      - name: Deploy to production (Blue-Green)
        run: |
          export KUBECONFIG=kubeconfig
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ needs.build-and-package.outputs.version }}|g" k8s/production/*.yaml
          
          # Deploy to blue environment
          kubectl apply -f k8s/production/
          kubectl rollout status deployment/memory-manager-web-blue -n production
          kubectl rollout status deployment/memory-manager-mock-server-blue -n production

      - name: Production health verification
        run: |
          export KUBECONFIG=kubeconfig
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=memory-manager-web-blue -n production --timeout=300s
          
          # Run production health checks
          ./scripts/production-health-check.sh

      - name: Switch traffic to blue environment
        run: |
          export KUBECONFIG=kubeconfig
          # Update service selectors to point to blue environment
          kubectl patch service memory-manager-web-service -n production -p '{"spec":{"selector":{"app":"memory-manager-web-blue"}}}'
          kubectl patch service memory-manager-mock-server-service -n production -p '{"spec":{"selector":{"app":"memory-manager-mock-server-blue"}}}'

      - name: Post-deployment monitoring
        run: |
          # Monitor metrics for 5 minutes after deployment
          sleep 300
          ./scripts/post-deployment-check.sh

      - name: Clean up old green environment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl delete deployment memory-manager-web-green -n production --ignore-not-found=true
          kubectl delete deployment memory-manager-mock-server-green -n production --ignore-not-found=true

      - name: Create release
        uses: actions/create-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## What's Changed
            
            Automated release from production deployment pipeline.
            
            ### Images
            - Web: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ needs.build-and-package.outputs.version }}
            - CLI: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cli:${{ needs.build-and-package.outputs.version }}
            - Mock Server: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mock-server:${{ needs.build-and-package.outputs.version }}

  # Notification and Reporting
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.deploy-production.result }}' === 'success' ? 'success' : 'failure';
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: 'https://memory-manager.example.com',
              description: `Production deployment ${status}`,
              context: 'continuous-integration/production'
            });